class Solution {
    public List<List<Integer>> ls = new ArrayList<>();
    public List<List<Integer>> permuteUnique(int[] nums) {
        int[] hash = new int[22];
        for(int i = 0; i<nums.length; i++){
            hash[i] = 1;
        }
        List<Integer> res = new ArrayList<>();
        dfs(hash,nums,res,nums.length);
        return ls;

    }
    public void dfs(int[] hash, int[] nums, List<Integer>res, int count){
        int[] h = hash.clone();
        List<Integer> li = new ArrayList<>(res);
        if(count<0){
            return;
        }
        if(count == 0){
            if(!ls.contains(li)){
                ls.add(li);
                return;
            }
        }
        for(int i = 0; i<nums.length;i++){
            if(h[i]==1){
                h[i] = 0;
                li.add(nums[i]);
                dfs(h, nums, li, count-1);
                h[i] = 1;
                li.remove(li.size()-1);
            }
        }
    }
}
