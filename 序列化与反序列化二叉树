/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        Deque<TreeNode> q = new LinkedList<>();
        StringBuffer s = new StringBuffer();
        q.offer(root);
        while(!q.isEmpty()){
            TreeNode node = q.poll();
            if(node == null){
                s.append("null");
            }
            else{
                s.append(node.val);
                q.offer(node.left);
                q.offer(node.right);
            }
            s.append(',');
        }
        return s.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] s = data.split(",");
        if(s[0].equals("null")){
            return null;
        }
        Deque<TreeNode> q = new LinkedList<>();
        TreeNode root = new TreeNode(Integer.parseInt(s[0]));
        q.offer(root);
        int index = 1, len = s.length;
        while(!q.isEmpty()){
            TreeNode node = q.poll();
            if(node == null){
                continue;
            }
            if(index >= len||s[index].equals("null")){
                node.left = null;
            }
            else{
                node.left = new TreeNode(Integer.parseInt(s[index]));
            }
            q.offer(node.left);
            if(index+1>=len||s[index+1].equals("null")){
                node.right = null;
            }else{
                node.right = new TreeNode(Integer.parseInt(s[index+1]));
            }
            q.offer(node.right);
            index+=2;
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
