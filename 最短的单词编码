class Solution {
    public int minimumLengthEncoding(String[] words) {
        int len = 0;
        Trie trie = new Trie();
        Arrays.sort(words, (s1, s2) -> s2.length() - s1.length());
        for (String word: words) {
            len += trie.insert(word);
        }
        return len;
    }
}
class Trie{
    class TreeNode{
        boolean isEnd;
        TreeNode[] next;
        public TreeNode(){
            isEnd = false;
            next = new TreeNode[26];
        }
    }
    private TreeNode root;
    public Trie(){
        root = new TreeNode();
    }
    public int insert(String word){
        if(startWith(word)){
            return 0;
        }
        TreeNode node = root;
        for(int i = word.length() - 1; i >= 0; --i){
            char c = word.charAt(i);
            if(node.next[c - 'a'] == null){
                node.next[c - 'a'] = new TreeNode();
            }
            node = node.next[c - 'a'];
        }
        return word.length() + 1;
    }
    public boolean startWith(String word){
        TreeNode node = root;
        for(int i = word.length() - 1; i >= 0; --i){
            node = node.next[word.charAt(i) - 'a'];
            if(node == null)return false;
        }
        return true;
    }
}
