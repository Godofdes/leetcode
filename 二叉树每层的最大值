/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    List<Integer> ls = new ArrayList<>();

    public List<Integer> largestValues(TreeNode root) {
        dfs(root, 0);
        return ls;
    }

    public void dfs(TreeNode root, int depth){
        if(root==null){
            return;
        }
        if(ls.size()==depth){
            ls.add(root.val);
        }
        else if(ls.size()>depth&&ls.get(depth)<root.val){
            ls.set(depth, root.val);
        }
        dfs(root.left, depth+1);
        dfs(root.right, depth+1);
    }
}
