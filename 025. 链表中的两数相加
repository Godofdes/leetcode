/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode newlist = new ListNode();
        
        Stack<ListNode> st1 = new Stack();
        Stack<ListNode> st2 = new Stack();
        ListNode p = l1;
        ListNode q = l2;

        int count = 0;

        while(p!=null){
            st1.push(p);
            p = p.next;
        }   
        while(q!=null){
            st2.push(q);
            q = q.next;
        }

        while(!st1.empty()&&!st2.empty()){
            p = st1.pop();
            q = st2.pop();
            
            ListNode newnode = new ListNode();
            newnode.val = (p.val+q.val+count)%10;
            count = p.val+q.val+count>=10?1:0;

            newnode.next = newlist.next;
            newlist.next = newnode;
            }
        
        if(st1.empty()&&!st2.empty()){
            while(!st2.empty()){
                q = st2.pop();
                ListNode newnode = new ListNode();
                newnode.val = (q.val+count)%10;
                count = q.val+count>=10?1:0;

                newnode.next = newlist.next;
                newlist.next = newnode;
            }
        }else if(st2.empty()&&!st1.empty()){
            while(!st1.empty()){
                p = st1.pop();
                ListNode newnode = new ListNode();
                newnode.val = (p.val+count)%10;
                count = p.val+count>=10?1:0;

                newnode.next = newlist.next;
                newlist.next = newnode;
            }
        }
        if(st1.empty()&&st2.empty()&&count==1){
            ListNode newnode = new ListNode();
            newnode.val = 1;
            newnode.next = newlist.next;
            newlist.next = newnode;
        }
        return newlist.next;
    }
}
