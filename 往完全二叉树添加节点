/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class CBTInserter {

    private ArrayList<TreeNode> nodeList;
    public CBTInserter(TreeNode root) {
        Deque<TreeNode> nodeQueue = new ArrayDeque<>();
        nodeQueue.add(root);
        nodeList = new ArrayList<>();
        while(!nodeQueue.isEmpty()){
            TreeNode node = nodeQueue.poll();
            nodeList.add(node);
            if(node.left!=null){
                nodeQueue.add(node.left);
            }
            if(node.right!=null){
                nodeQueue.add(node.right);
            }
        }
    }
    
    public int insert(int val) {
        int size = nodeList.size();
        TreeNode newNode = new TreeNode(val);
        nodeList.add(newNode);
        TreeNode node = nodeList.get(nodeList.size()/2-1);

        if(node.left==null){
            node.left = newNode; 
        }else if(node.right==null){
            node.right = newNode;
        }
        return node.val;
    }
    
    public TreeNode get_root() {
       return nodeList.get(0);
    }
}
/**
 * Your CBTInserter object will be instantiated and called as such:
 * CBTInserter obj = new CBTInserter(root);
 * int param_1 = obj.insert(v);
 * TreeNode param_2 = obj.get_root();
 */
