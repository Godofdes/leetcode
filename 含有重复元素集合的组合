class Solution {

    List<List<Integer>> ls = new ArrayList<>();
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<Integer> res = new ArrayList<>();
        dfs(0,candidates, res, target);
        return ls;
    }
    public void dfs(int i, int[] nums, List<Integer> res, int count){
        if(count < 0) return;
        if(count == 0){
            List<Integer> li = new ArrayList<>(res);
            Collections.sort(li);
            if(!ls.contains(li)){
                ls.add(li);
            }
            return;
        }
        for(int j = i; j<nums.length;j++){
            res.add(nums[j]);
            dfs(j+1, nums, res, count-nums[j]);
            res.remove(res.size()-1);
        }
    }
}
